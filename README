omer.benmoshe
roip500

Our design for the ex' was the following:
1. our main class, sJavac read the file twice. the first time it checked the
   global variables, the scopes (making sure that all the scopes get closed and that we finish
   in scope 0) and makes a list of all the methods that were created in the file.
   the second read goes into the methods and checks that all the variables are used correctly,
   that the if\while statements are legal and that all the calls to and inside a method are legal.
   if any check is false then an error is thrown. the class will catch the error and print to with
   the line where the error happened.
2. We created 3 classes, each one checking the properties of its kind:
   a - Variables: holds a list of hashmaps where each cell in the list is a scope, and the
                  hashmap holds all the variables in the scope (the key is the name of the variable,
                  and the value is a class called VarInfo which holds the information regarding the
                  variable). the class checks everything to do with the variables.
   b - Methods: holds a hashmap where the key is the name of the method and the value is the list of
                variables the method needs to get.
   c - WhileIf: checks that the if and while statements are legal and that the values given are legal
                values.
   each class has its own class of exceptions that are designed so the message will be in a form of a
   tree of information.


the tests we created:
1 - checks the possibility of multiple variables with the same name but different
    scopes (must return 0)
2 - checks correct call to method with global and inner variables (must return 0)
3 - check that the while method can only be called in a method (must return 1)
4 - checks call to method with a variable from the wrong type (must return 1)
5 - checks that the global variable that is initialized after the method call is
    used inside the method (must return 0)
6 - checks that boolean variable can be assigned by integer variable (must return 0)
7 - checks legal if statement (must return 0)
8 - checks the || sign in an if statement
9 - checks the || and && sign in an if statement adn that the values given are legal
10 - checks call to method with set values of type int, double and boolean
11 - checks call to method with set values of type char and String
12 - checks call to method with a variable that isn't created
13 - checks call to method in global scope (must return 1)
14 - checks call to method with a cast from int type to boolean type
15 - checks initialization of a few variable in the same line
16 - checks assignment of a few variable in the same line
17 - checks that 2 global variables can't have the same name (must return 1)
18 - checks method with no return statement
19 - checks legal uses of Final variable (must return 0)
20 - checks assignment to Final variable (must return 1)


the questions:


6.1 - As we wrote above we handled the errors by throwing exceptions from the 3 classes to the
      main class, which then caught it and printed them out with the line and it number. this
      helped simplify the process cause throwing the exception minimized the usage of returning
      values and allows our code to be more efficient.


6.2.1 - how would we modify our code to add new types of variables?
        Because we created a class for each type of object in the s-java file so any new variable
        will be added to the Variable class.
        the first step would be to clarify the legal way to write a value of such type, and that
        would allow us to write a regex that would be able to state whether or not the object fits
        the type. the we will need to add a case to our function "checkIfValueIsTheRightType" which
        is the only function that checks if a value is from a specific type.
        all the rest of the code is generic to the types of values so there is no need to change any
        of it.


6.2.2 - how would we implement Different methodsâ€™ return types?
        the return type is part of the description of the method, so we would need to change the method
        hashmap from having a list of variables as a value to having a new object called MethodInfo.
        MethodInfo will be a new class we will create, which much like VarInfo, will hold all the information
        about the method. one of the things this class will hold would be the type the method can return.
        when ever we call the return function in method we will check that the value matches the type
        the method is required to return, and if no it will throw an exception.


        how would we implement Class?
        we would need to create a class function that would be in charge of checking all the rules regarding
        classes. this class will also have a hashmap that will have names of classes as its keys, and for value
        it would have a list of lists. the first list will hold all the abjects initialized in the class. the
        second list will hold all the methods the class has. we would need to implement a private and public
        kind of method in the Method class and when calling a method that belongs to a class we would check
        if its public or private and act accordingly.


6.3 - the first regex was used to check if the line is a initialization of a variable:
      "^([a-zA-Z]+\\w*|_\\w+)\\s*=\\s*(.*)\\s*$"


      the second regex was used to check the while if statement:
      ^(?:if|while)\\s*[(](\\s*(?:(?:true|false|\\w+|[+\\-]?(?:\\d+\\.?\\d*|\\d*\\.\\d+))+\\s*
      (?:\\|\\||&&)?\\s*)+\\s*)[)]\\s*[{]$"



